//
// Copyright (c) .NET Foundation and Contributors
// See LICENSE file in the project root for full license information.
//

#include <nanoHAL.h>
#include <nanoCLR_Interop.h>
#include <nanoCLR_Runtime.h>
#include <nanoCLR_Checks.h>
#include <nf_rt_native.h>
#include <target_platform.h>

#if !defined(K210_USE_RTC) //TODO define 
    #error "Need the RTC to be enabled. Please set CMake option NF_FEATURE_RTC to ON."
#endif

#include "devices.h"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// these functions are the real implementation of the 'weak' ones declared at src\CLR\Runtime.Native\nf_rt_native_nanoFramework_Runtime_Native_Rtc_stubs.cpp //
// the stubs for this class are generated by nanoFramework.Runtime.Native                                                                                    //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

HRESULT Library_nf_rt_native_nanoFramework_Runtime_Native_Rtc::Native_RTC_SetSystemTime___STATIC__BOOLEAN__I4__U1__U1__U1__U1__U1__U1( CLR_RT_StackFrame& stack )
{
    NANOCLR_HEADER();
    {
        file rtc = io_open("/dev/rtc0");

        struct tm *srtcDate;

        // tm->tm_year is year since 1900
        srtcDate->tm_year = (uint16_t)(stack.Arg0().NumericByRef().s4) - 1900;  
        // tm->tm_mon is month since Janualy
        srtcDate->tm_mon = (uint8_t) stack.Arg1().NumericByRef().u1 - 1;
        srtcDate->tm_mday = (uint8_t) stack.Arg2().NumericByRef().u1;   
        srtcDate->tm_hour = (uint8_t) stack.Arg4().NumericByRef().u1;  
        srtcDate->tm_min = (uint8_t )stack.Arg5().NumericByRef().u1;
        srtcDate->tm_sec = (uint8_t) stack.Arg6().NumericByRef().u1; 

        // Set new date and start RTC        
        rtc_set_datetime(rtc, srtcDate);

        // Return value to the managed application
        stack.SetResult_Boolean(true);
    }
    NANOCLR_NOCLEANUP_NOLABEL();
}
